{"version":3,"sources":["logo.svg","Todolist.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Todolist","state","checked","checkList","_this","setState","react_default","a","createElement","onClick","this","className","props","item","Component","App","todo","todos","onChange","event","target","value","onSubmit","preventDefault","concat","Object","toConsumableArray","newList","_this2","todoList1","map","src_Todolist","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,oLCuCzBC,0NAnCbC,MAAQ,CACNC,SAAS,KAGXC,UAAW,WAEiB,SAAvBC,EAAKH,MAAMC,QACZE,EAAKC,SAAS,CACZH,QAAQ,UAENE,EAAKC,SAAS,CAClBH,QAAS,kFASX,OAEEI,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,MAAIC,QAASC,KAAKP,UAAWQ,UAAWD,KAAKT,MAAMC,SAChDQ,KAAKE,MAAMC,cA3BCC,cCwERC,6MAlEbd,MAAQ,CAENe,KAAM,GACNC,MAAO,MAIPC,SAAW,SAACC,GACVf,EAAKC,SAAS,CACZW,KAAMG,EAAMC,OAAOC,WAMvBC,SAAU,SAACH,GACTA,EAAMI,iBAINnB,EAAKC,SAAS,CACZW,KAAK,GACLC,MAAK,GAAAO,OAAAC,OAAAC,EAAA,EAAAD,CAAMrB,EAAKH,MAAMgB,OAAjB,CAAwBb,EAAKH,MAAMe,YAU5CW,QAAU,WACRvB,EAAKC,SAAS,CACZW,KAAK,GACLC,MAAM,8EAIJ,IAAAW,EAAAlB,KACAmB,EAAYnB,KAAKT,MAAMgB,MAAMa,IAAI,SAACjB,GACtC,OAAOP,EAAAC,EAAAC,cAACuB,EAAD,CAAU5B,UAAWyB,EAAKzB,UAAWmB,SAAUM,EAAKN,SAAUT,KAAMA,MAI7E,OACEP,EAAAC,EAAAC,cAAA,WAEAF,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,KAAKW,SAAUZ,KAAKY,UAClChB,EAAAC,EAAAC,cAAA,SAAOG,UAAU,QAASqB,YAAY,WAAWd,SAAUR,KAAKQ,SAAUG,MAAOX,KAAKT,MAAMe,OAC5FV,EAAAC,EAAAC,cAAA,UAAQG,UAAU,OAAlB,OACAL,EAAAC,EAAAC,cAAA,UAAQG,UAAU,MAAMF,QAASC,KAAKiB,SAAtC,YACCE,WAxDOf,aCOEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f5e66805.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\n\nclass Todolist extends Component {\n\n  state = {\n    checked: false\n  }\n\n  checkList =()=>{\n      \n    if(this.state.checked === 'true'){\n      this.setState({\n        checked:'false'\n      });\n    }else this.setState({\n      checked: 'true'\n    \n    })\n      \n  }\n \n\n\n  render(){\n    return (\n\n      <div>\n         \n        <li onClick={this.checkList} className={this.state.checked}> \n          {this.props.item}\n        </li> \n      </div>\n      \n    );\n  }\n\n\n}\n\nexport default Todolist;","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Todolist from './Todolist' ;\n\nclass App extends Component {\n\n\n  state = {\n\n    todo: '' ,\n    todos: []   \n\n  }\n    \n    onChange = (event) => {\n      this.setState({ \n        todo: event.target.value ,\n      \n        \n        });\n    \n    }\n    onSubmit =(event) =>{\n      event.preventDefault();\n      \n      // let todolist = this.state.todos.splice(0)\n      // todos1.push(this.state.todo)\n      this.setState({\n        todo:'',\n        todos: [...this.state.todos, this.state.todo],\n        \n        // todos: todos1 \n      })\n      \n      \n    }\n   \n\n    \n    newList = ()=>{\n      this.setState({\n        todo:'',\n        todos:[]\n      }) \n    }\n    \n  render(){\n    const todoList1 = this.state.todos.map((item)=>{\n      return <Todolist checkList={this.checkList} onSubmit={this.onSubmit} item={item}/> ;\n        \n      \n    })\n    return (\n      <div>\n           \n      <h1>To Do List</h1>\n        <form className='cl' onSubmit={this.onSubmit}>\n          <input className='input'  placeholder=\"...TO DO\" onChange={this.onChange} value={this.state.todo}/>\n          <button className=\"btn\">add</button>\n          <button className=\"btn\" onClick={this.newList}>New List</button>\n          {todoList1}\n        </form>\n        \n        \n        \n        \n        \n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}